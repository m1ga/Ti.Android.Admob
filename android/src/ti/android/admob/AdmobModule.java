/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2010 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package ti.android.admob;

import android.app.Activity;
import android.content.Context;
import android.os.Bundle;

import androidx.annotation.Nullable;

import com.google.ads.mediation.inmobi.InMobiConsent;
import com.google.android.ads.mediationtestsuite.MediationTestSuite;
import com.google.android.gms.ads.MobileAds;
import com.google.android.gms.ads.RequestConfiguration;
import com.google.android.gms.ads.initialization.AdapterStatus;
import com.google.android.gms.ads.initialization.InitializationStatus;
import com.google.android.gms.ads.initialization.OnInitializationCompleteListener;
import com.google.android.ump.ConsentDebugSettings;
import com.google.android.ump.ConsentForm;
import com.google.android.ump.ConsentInformation;
import com.google.android.ump.ConsentRequestParameters;
import com.google.android.ump.FormError;
import com.google.android.ump.UserMessagingPlatform;
import com.inmobi.sdk.InMobiSdk;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.titanium.TiApplication;
import org.json.JSONException;
import org.json.JSONObject;

import java.util.Arrays;
import java.util.List;
import java.util.Map;

@Kroll.module(name="Admob", id="ti.android.admob")
public class AdmobModule extends KrollModule
{
    private static final String TAG = "Admob Module";
    public static String MODULE_NAME = "Admob";

    //CONSENT
    private ConsentInformation consentInformation;
    private ConsentForm _consentForm;

    //EVENTS
    @Kroll.constant
    public static final String ADMOB_READY = "ready";
    @Kroll.constant
    public static final String ADMOB_NOT_READY_YET = "not_ready_yet";
    @Kroll.constant
    public static final String AD_RECEIVED = "ad_received";
    @Kroll.constant
    public static final String AD_NOT_RECEIVED = "ad_received";
    @Kroll.constant
    public static final String AD_CLOSED = "ad_closed";
    @Kroll.constant
    public static final String AD_FAILED_TO_LOAD = "ad_failed_to_load";
    @Kroll.constant
    public static final String AD_LOADED = "ad_loaded";
    @Kroll.constant
    public static final String AD_OPENED = "ad_opened";

    @Kroll.constant
    public static final String AD_NOT_READY= "ad_not_ready";
    @Kroll.constant
    public static final String AD_FAILED_TO_SHOW = "ad_failed_to_show";
    @Kroll.constant
    public static final String AD_REWARDED = "ad_rewarded";
    @Kroll.constant
    public static final String AD_CLICKED = "ad_clicked";
    @Kroll.constant
    public static final String AD_SHOWED_FULLSCREEN_CONTENT = "ad_showed_fullscreen_content";
    @Kroll.constant
    public static final String CONSENT_FORM_READY = "consent_ready";
    @Kroll.constant
    public static final String CONSENT_ERROR = "consent_error";
    @Kroll.constant
    public static final String CONSENT_INFO_UPDATE_FAILURE = "consent_info_update_failure";
    @Kroll.constant
    public static final String CONSENT_FORM_DISMISSED = "consent_form_dismissed";
    @Kroll.constant
    public static final String CONSENT_FORM_LOADED = "consent_form_loaded";
    @Kroll.constant
    public static final String CONSENT_NOT_REQUIRED = "consent_not_required";
    @Kroll.constant
    public static final String CONSENT_REQUIRED = "consent_required";
    @Kroll.constant
    public static final String CONSENT_FORM_NOT_AVAILABLE = "consent_not_available";

    //AD SIZES
    @Kroll.constant
    public static final String BANNER = "BANNER";                       // 320x50
    @Kroll.constant
    public static final String LARGE_BANNER = "LARGE_BANNER";           // 320x100
    @Kroll.constant
    public static final String MEDIUM_RECTANGLE = "MEDIUM_RECTANGLE";   // 300x250
    @Kroll.constant
    public static final String FULL_BANNER = "FULL_BANNER";             // 468x60
    @Kroll.constant
    public static final String LEADERBOARD = "LEADERBOARD";             // 728x90
    @Kroll.constant
    public static final String SMART_BANNER = "SMART_BANNER";           // Screen width x 32|50|90

    @Kroll.constant
    public static final String NATIVE_ADS = "NATIVE_ADS";

    // ADAPTIVE TYPES
    @Kroll.constant
    public static final String ADAPTIVE_ANCHORED = "ADAPTIVE_ANCHORED";

    @Kroll.constant
    public static final String ADAPTIVE_INLINE = "ADAPTIVE_INLINE";

    // AD UNIT IDS
    public static String AD_UNIT_ID;
    public static String BANNER_AD_UNIT_ID;
    public static String INTERSTITIAL_AD_UNIT_ID;
    public static String APP_OPEN_AD_UNIT_ID;
    public static String REWARDED_AD_UNIT_ID;
    public static String REWARDED_INTERSTITIAL_AD_UNIT_ID;
    public static String NATIVE_AD_UNIT_ID;

    public static String TEST_DEVICE_ID;
    public static String PROPERTY_COLOR_BG;
    public static String NATIVE_ADS_BACKGROUND_COLOR;
    public static String PROPERTY_COLOR_BG_TOP;
    public static String PROPERTY_COLOR_BORDER;
    public static String PROPERTY_COLOR_TEXT;
    public static String PROPERTY_COLOR_LINK;
    public static String PROPERTY_COLOR_URL;
    public static String PROPERTY_COLOR_TEXT_DEPRECATED;
    public static String PROPERTY_COLOR_LINK_DEPRECATED;
    public static String AD_SIZE_TYPE;
    public static String AD_SIZES_LABEL;
    public static String KEYWORD;
    public static String CONTENT_URL;
    public static String CUSTOM_NATIVE_TEMPLATE_ID;
    
    public static String VIEW_TYPE;

    public static Boolean INIT_READY = false;
    
    @Kroll.constant
    public static final String TYPE_ADS = "ads";
    
    @Kroll.constant
    public static final String TYPE_STARS = "stars";
    
    @Kroll.constant
    public static final String TYPE_MEDIA = "media";
    
    public static String MASTER_VIEW;
    public static String MEDIA_VIEW;
    public static String HEADLINE_LABEL;
    public static String IMAGE_VIEW;
    public static String IMAGE_LOGO;
    public static String BODY_LABEL;
    public static String CALL_TO_ACTION_BUTTON;
    public static String LOGO_OR_ICON_IMAGE_VIEW;
    public static String ADVERTISER_LABEL;
    public static String STORE_LABEL;
    public static String STARS_VIEW;
    public static String PRICE_LABEL;
    public static String EXTRA_BUNDLE;

    // Colors
    static Bundle extras;
    public static String prop_color_bg;
    public static String prop_color_bg_top;
    public static String prop_color_border;
    public static String prop_color_text;
    public static String prop_color_link;
    public static String prop_color_url;

    public AdmobModule() {
        super(MODULE_NAME);
        Log.d(TAG, "Admob Module Instantiated");
    }

    static {
        PROPERTY_COLOR_BG = "backgroundColor";
        PROPERTY_COLOR_BG_TOP = "backgroundTopColor";
        PROPERTY_COLOR_BORDER = "borderColor";
        PROPERTY_COLOR_TEXT = "textColor";
        PROPERTY_COLOR_LINK = "linkColor";
        PROPERTY_COLOR_URL = "urlColor";
        PROPERTY_COLOR_TEXT_DEPRECATED = "primaryTextColor";
        PROPERTY_COLOR_LINK_DEPRECATED = "secondaryTextColor";
        AD_SIZE_TYPE = "adSizeType";
        AD_SIZES_LABEL = "adSizes";
        
        VIEW_TYPE = "viewType";
        
        MASTER_VIEW = "masterView";
        MEDIA_VIEW = "mediaView";
        HEADLINE_LABEL = "headlineLabel";
        IMAGE_VIEW = "imageView";
        BODY_LABEL = "bodyLabel";
        CALL_TO_ACTION_BUTTON = "callToActionButton";
        IMAGE_LOGO = "imageLogo";
        LOGO_OR_ICON_IMAGE_VIEW = "logoOrIconImageView";
        ADVERTISER_LABEL = "advertiserLabel";
        STORE_LABEL = "storeLabel";
        STARS_VIEW = "starsView";
        PRICE_LABEL = "priceLabel";
        NATIVE_ADS_BACKGROUND_COLOR = "backgroundColor";
        
        KEYWORD = "keyword";
        CONTENT_URL = "contentUrl";
        CUSTOM_NATIVE_TEMPLATE_ID = "customNativeTemplateId";
        
        EXTRA_BUNDLE = "extras";
    }

    // Handle creation options
    @Override
    public void handleCreationDict(KrollDict options) {
        Log.d(TAG, "handleCreationDict...");
        super.handleCreationDict(options);
    }

    public static AdmobModule getModuleInstance() {
        TiApplication appContext = TiApplication.getInstance();
        AdmobModule module = (AdmobModule) appContext.getModuleByName(MODULE_NAME);
        return module;
    }

    @Kroll.onAppCreate
    public static void onAppCreate(TiApplication app) {
        Log.d(TAG, "-- Ti.Android.Admob -> onAppCreate --");

        MobileAds.initialize(app, new OnInitializationCompleteListener() {
            @Override
            public void onInitializationComplete(InitializationStatus initializationStatus) {
                Map<String, AdapterStatus> statusMap = initializationStatus.getAdapterStatusMap();
                for (String adapterClass : statusMap.keySet()) {
                    AdapterStatus status = statusMap.get(adapterClass);
                    Log.d("Admob Adapters", String.format(
                            "Adapter name: %s, Description: %s, Latency: %d",
                            adapterClass, status.getDescription(), status.getLatency()));
                }

                // Start loading ads here...
                Log.d(TAG, "-- All Adapters are ready to request ads --");

                AdmobModule module = getModuleInstance();
                if (module != null && module.hasListeners(ADMOB_READY)) {
                    module.fireEvent(ADMOB_READY, new KrollDict());
                }

                Log.d(TAG, "ADMOB_READY");
                Log.d(TAG, "-- INIT_READY is now TRUE --");

                INIT_READY = true;
            }
        });
    }

    @Kroll.method
    public void showMediationTestSuite() {
        MediationTestSuite.launch(TiApplication.getInstance().getCurrentActivity());
    }

    @Kroll.method
    public boolean isAdmobReady(){
        return INIT_READY;
    }

    @Kroll.method
    public void setInMobi_updateGDPRConsent(boolean isEnable) {
        JSONObject consentObject = new JSONObject();
        try {
            if (isEnable){
                consentObject.put(InMobiSdk.IM_GDPR_CONSENT_AVAILABLE, true);
                consentObject.put("gdpr", "1");
                Log.d(TAG, "inMobi GDPR enabled");
            } else {
                consentObject.put(InMobiSdk.IM_GDPR_CONSENT_AVAILABLE, true);
                consentObject.put("gdpr", "0");
                Log.d(TAG, "inMobi GDPR disabled");
            }
        } catch (JSONException exception) {
            Log.e(TAG, "inMobi GDPR error");
            exception.printStackTrace();
            return;
        }

        InMobiConsent.updateGDPRConsent(consentObject);
    }

    @Kroll.method
    private void requestConsentForm(){

        Context appContext = TiApplication.getInstance().getApplicationContext();
        Context currentActivity = TiApplication.getInstance().getCurrentActivity();

        ConsentDebugSettings debugSettings = new ConsentDebugSettings.Builder(appContext)
                .setDebugGeography(ConsentDebugSettings
                        .DebugGeography
                        .DEBUG_GEOGRAPHY_EEA)
                .addTestDeviceHashedId(TEST_DEVICE_ID)
                .build();

        // Set tag for underage of consent. false means users are not underage.
        ConsentRequestParameters params = new ConsentRequestParameters
                .Builder()
                .setConsentDebugSettings(debugSettings)
                .setTagForUnderAgeOfConsent(false)
                .build();

        consentInformation = UserMessagingPlatform.getConsentInformation(appContext);
        consentInformation.requestConsentInfoUpdate((Activity) currentActivity, params,
                new ConsentInformation.OnConsentInfoUpdateSuccessListener() {
                    @Override
                    public void onConsentInfoUpdateSuccess() {
                        // The consent information state was updated.
                        // You are now ready to check if a form is available.
                        if (consentInformation.isConsentFormAvailable()) {
                            loadForm();
                            if (hasListeners(CONSENT_FORM_READY)) {
                                fireEvent(CONSENT_FORM_READY, new KrollDict());
                            }
                        } else {
                            Log.d(TAG, ("Consent form is NOT AVAILABLE!"));
                            if (hasListeners(CONSENT_FORM_NOT_AVAILABLE)) {
                                fireEvent(CONSENT_FORM_NOT_AVAILABLE, new KrollDict());
                            }
                        }
                    }
                },
                new ConsentInformation.OnConsentInfoUpdateFailureListener() {
                    @Override
                    public void onConsentInfoUpdateFailure(FormError formError) {
                        // Handle the error.
                        Log.e(TAG, ("ConsentForm Update Failure : " + formError.getMessage()));
                        if (hasListeners(CONSENT_INFO_UPDATE_FAILURE)) {
                            KrollDict errorCallback = new KrollDict();
                            errorCallback.put("message", formError.getMessage());
                            errorCallback.put("code", formError.getErrorCode());
                            fireEvent(CONSENT_INFO_UPDATE_FAILURE, errorCallback);
                        }
                    }
                }
        );
    }

    private void loadForm(){

	    Context appContext = TiApplication.getInstance().getApplicationContext();
        Context currentActivity = TiApplication.getInstance().getCurrentActivity();

        UserMessagingPlatform.loadConsentForm(
                appContext,
                new UserMessagingPlatform.OnConsentFormLoadSuccessListener() {
                    @Override
                    public void onConsentFormLoadSuccess(ConsentForm consentForm) {

                        if (hasListeners(CONSENT_FORM_LOADED)) {
                            fireEvent(CONSENT_FORM_LOADED, new KrollDict());
                        }

                        _consentForm = consentForm;
                        if(consentInformation.getConsentStatus() == ConsentInformation.ConsentStatus.REQUIRED) {
                            Log.d(TAG, ("Consent information is REQUIRED! You should call showConsentForm()"));
                            if (hasListeners(CONSENT_REQUIRED)) {
                                fireEvent(CONSENT_REQUIRED, new KrollDict());
                            }
                        } else {
                            Log.d(TAG, ("Consent information is NOT REQUIRED!"));
                            if (hasListeners(CONSENT_NOT_REQUIRED)) {
                                fireEvent(CONSENT_NOT_REQUIRED, new KrollDict());
                            }
                        }
                    }
                },
                new UserMessagingPlatform.OnConsentFormLoadFailureListener() {
                    @Override
                    public void onConsentFormLoadFailure(FormError formError) {
                        Log.e(TAG, ("ConsentForm error : " + formError.getMessage()));
                        if (hasListeners(CONSENT_ERROR)) {
                            KrollDict errorCallback = new KrollDict();
                            errorCallback.put("message", formError.getMessage());
                            fireEvent(CONSENT_ERROR, errorCallback);
                        }
                    }
                }
        );
    }

    // CONSENT STATUS
    @Kroll.constant
    public static final int CONSENT_STATUS_NOT_REQUIRED = ConsentInformation.ConsentStatus.NOT_REQUIRED;
    @Kroll.constant
    public static final int CONSENT_STATUS_OBTAINED = ConsentInformation.ConsentStatus.OBTAINED;
    @Kroll.constant
    public static final int CONSENT_STATUS_REQUIRED = ConsentInformation.ConsentStatus.REQUIRED;
    @Kroll.constant
    public static final int CONSENT_STATUS_UNKNOWN = ConsentInformation.ConsentStatus.UNKNOWN;

    @Kroll.constant
    public static final int CONSENT_INFO_NOT_READY = 99;


    @Kroll.method
    public void setTestDeviceId(String deviceId){

        TEST_DEVICE_ID = deviceId;

        List<String> testDeviceIds = Arrays.asList(deviceId);
        RequestConfiguration configuration =
                new RequestConfiguration.Builder().setTestDeviceIds(testDeviceIds).build();
        MobileAds.setRequestConfiguration(configuration);
    }

    @Kroll.method
    public int getConsentStatus(){
        if (consentInformation != null) {
            return consentInformation.getConsentStatus();
        }
        Log.e(TAG, ("ConsentStatus error : CONSENT_INFO_NOT_READY. Did you call requestConsentForm()"));
        return CONSENT_INFO_NOT_READY;
    }

    @Kroll.method
    public void showConsentForm(){

        Context currentActivity = TiApplication.getInstance().getCurrentActivity();

        _consentForm.show((Activity) currentActivity,
                new ConsentForm.OnConsentFormDismissedListener() {
                    @Override
                    public void onConsentFormDismissed(@Nullable FormError formError) {
                        Log.d(TAG, ("onConsentFormDismissed : CONSENT_FORM_DISMISSED"));
                        // Handle dismissal by reloading form.
                        if (hasListeners(CONSENT_FORM_DISMISSED)) {
                            KrollDict errorCallback = new KrollDict();
                            if (formError != null){
                                errorCallback.put("message", formError.getMessage());
                            }
                            fireEvent(CONSENT_FORM_DISMISSED, errorCallback);
                        }
                        loadForm();
                    }
                }
        );
    }

    @Kroll.method
    public void resetConsentForm(){
        if (consentInformation != null) {
            consentInformation.reset();
        } else {
            Log.e(TAG, ("ConsentStatus error : CONSENT_INFO_NOT_READY. Did you call requestConsentForm()"));
        }
    }

    public static Bundle createAdRequestProperties() {
        Bundle bundle = new Bundle();
        if (prop_color_bg != null) {
            Log.d(TAG, "color_bg: " + prop_color_bg);
            bundle.putString("color_bg", prop_color_bg);
        }
        if (prop_color_bg_top != null)
            bundle.putString("color_bg_top", prop_color_bg_top);
        if (prop_color_border != null)
            bundle.putString("color_border", prop_color_border);
        if (prop_color_text != null)
            bundle.putString("color_text", prop_color_text);
        if (prop_color_link != null)
            bundle.putString("color_link", prop_color_link);
        if (prop_color_url != null)
            bundle.putString("color_url", prop_color_url);
        if (extras != null)
            bundle.putAll(extras);

        return bundle;
    }

    public static String getErrorReason(int errorCode) {
        String errorReason = "";
        switch (errorCode) {
            case 0: {
                errorReason = "Internal error";
                break;
            }
            case 1: {
                errorReason = "Invalid request";
                break;
            }
            case 2: {
                errorReason = "Network Error";
                break;
            }
            case 3: {
                errorReason = "No fill";
            }
        }
        return errorReason;
    }

    /*
     * ca-app-pub-3940256099942544/6300978111 Interstitial
     * ca-app-pub-3940256099942544/1033173712 Interstitial Video
     * ca-app-pub-3940256099942544/8691691433 Rewarded Video
     * ca-app-pub-3940256099942544/5224354917 Native Advanced
     * ca-app-pub-3940256099942544/2247696110 Native Advanced Video
     * ca-app-pub-3940256099942544/1044960115 Banner
     * ca-app-pub-3940256099942544/3419835294 Open App
     */
}